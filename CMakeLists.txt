CMAKE_MINIMUM_REQUIRED(VERSION 3.9)
PROJECT(stdnn-ops)

SET(CMAKE_CXX_STANDARD 17)
SET(CMAKE_MODULE_PATH ${CMAKE_SOURCE_DIR}/cmake)


FIND_PROGRAM(CLANG_TIDY_EXE NAMES "clang-tidy")
IF(CLANG_TIDY_EXE)
    SET(CMAKE_CXX_CLANG_TIDY clang-tidy)
ENDIF()

IF(APPLE)
    ADD_DEFINITIONS(-DHAVE_STD_CPP_FS)
ELSE()
    LINK_LIBRARIES(stdc++fs)
ENDIF()

OPTION(BUILD_BENCHMARKS "Build benchmarks." OFF)
OPTION(BUILD_EXAMPLES "Build examples." OFF)
OPTION(BUILD_LIB "Build library." OFF)
OPTION(BUILD_PACKAGES "Build release packages." OFF)
OPTION(BUILD_TESTS "Build tests." OFF)
OPTION(USE_EXTERN "use extern template." OFF)
OPTION(USE_OPENBLAS "Build with blas." OFF)
OPTION(USE_OPT "Turn on optimization flags." OFF)
OPTION(USE_STRICT "Enable strict build options." ON)

IF(USE_STRICT)
    ADD_DEFINITIONS(-Wall)
    ADD_DEFINITIONS(-Werror)
    ADD_DEFINITIONS(-Wfatal-errors)
ENDIF()

IF(USE_EXTERN)
    ADD_DEFINITIONS(-DSTDNN_OPS_EXTERN_TEMPLATE)
ENDIF()

IF(USE_OPT)
    ADD_DEFINITIONS(-ffast-math)
ENDIF()

IF(USE_OPENBLAS)
    INCLUDE(cmake/blas.cmake)
ENDIF()

INCLUDE_DIRECTORIES(${CMAKE_SOURCE_DIR}/include)

IF(BUILD_TESTS)
    FIND_PACKAGE(stdtensor REQUIRED)
    ENABLE_TESTING()
    INCLUDE(cmake/tests.cmake)
ENDIF()

IF(BUILD_BENCHMARKS)
    INCLUDE(cmake/benchmarks.cmake)
ENDIF()

IF(BUILD_LIB)
    ADD_LIBRARY(stdnn-ops src/nn/ops.cpp)
    TARGET_USE_STDTENSOR(stdnn-ops)
ENDIF()

IF(BUILD_EXAMPLES)
    ADD_SUBDIRECTORY(examples)
ENDIF()

INSTALL(DIRECTORY include DESTINATION .)

IF(BUILD_PACKAGES)
    INCLUDE(cmake/package.cmake)
ENDIF()
